name: Integration Tests

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Test with tmux on macOS
  tmux-test-macos:
    name: Tmux Integration Test (macOS)
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up uv
        uses: astral-sh/setup-uv@bd01e18f51369d5a26f1651c3cb451d3417e3bba # v6.3.1
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Install tmux
        run: |
          # Install tmux if not already available
          if ! command -v tmux &> /dev/null; then
            brew install tmux
          fi
          
          # Verify tmux installation
          tmux -V

      - name: Run tmux integration tests
        run: |
          # Run tmux-based tests
          uv run pytest -v tests/test_tmux_integration.py -m tmux

      - name: Run unit tests
        run: |
          # Also run regular unit tests to ensure no regression
          uv run pytest -v -m "not integration and not tmux" --cov=iterm2_focus

  # Test with tmux on Ubuntu
  tmux-test-ubuntu:
    name: Tmux Integration Test (Ubuntu)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up uv
        uses: astral-sh/setup-uv@bd01e18f51369d5a26f1651c3cb451d3417e3bba # v6.3.1
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Install tmux
        run: |
          # Update package list and install tmux
          sudo apt-get update
          sudo apt-get install -y tmux
          
          # Verify tmux installation
          tmux -V

      - name: Run tmux integration tests
        run: |
          # Run tmux-based tests
          uv run pytest -v tests/test_tmux_integration.py -m tmux

  # Mock server test that simulates iTerm2 API
  mock-server-test:
    name: Mock iTerm2 API Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up uv
        uses: astral-sh/setup-uv@bd01e18f51369d5a26f1651c3cb451d3417e3bba # v6.3.1
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Create iTerm2 API mock
        run: |
          cat > mock_iterm2.py << 'EOF'
          """Mock iTerm2 module for testing in CI."""
          import asyncio
          from typing import List, Optional, Dict, Any
          
          
          class MockSession:
              def __init__(self, session_id: str, name: str = "Mock Session"):
                  self.session_id = session_id
                  self.name = name
                  self._variables = {
                      "session.name": name,
                      "session.tty": f"/dev/ttys{session_id[-3:]}",
                      "user.username": "testuser",
                      "session.hostname": "localhost",
                      "session.path": "/home/testuser"
                  }
              
              async def async_activate(self):
                  """Mock activate method."""
                  return True
              
              async def async_get_variable(self, name: str) -> Optional[str]:
                  """Mock get variable method."""
                  return self._variables.get(name)
          
          
          class MockTab:
              def __init__(self, sessions: List[MockSession]):
                  self.sessions = sessions
                  self.tab_id = "mock_tab_1"
              
              async def async_select(self):
                  """Mock select method."""
                  return True
          
          
          class MockWindow:
              def __init__(self, tabs: List[MockTab]):
                  self.tabs = tabs
                  self.window_id = "mock_window_1"
              
              async def async_activate(self):
                  """Mock activate method."""
                  return True
          
          
          class MockApp:
              def __init__(self):
                  # Create some mock sessions
                  session1 = MockSession("mock_session_001", "Session 1")
                  session2 = MockSession("mock_session_002", "Session 2")
                  tab1 = MockTab([session1])
                  tab2 = MockTab([session2])
                  window = MockWindow([tab1, tab2])
                  self.terminal_windows = [window]
          
          
          class MockConnection:
              """Mock connection class."""
              
              @classmethod
              async def async_create(cls):
                  """Mock create connection."""
                  return cls()
          
          
          async def async_get_app(connection):
              """Mock get app function."""
              return MockApp()
          
          
          # Mock the Connection class
          Connection = MockConnection
          EOF

      - name: Run tests with mock iTerm2
        run: |
          # Add mock to Python path
          export PYTHONPATH="${PWD}:${PYTHONPATH}"
          
          # Create a wrapper that imports our mock
          cat > test_with_mock.py << 'EOF'
          import sys
          sys.modules['iterm2'] = __import__('mock_iterm2')
          
          # Now run the actual tests
          import subprocess
          result = subprocess.run([
              sys.executable, "-m", "pytest", "-v", 
              "tests/test_focus.py", "tests/test_utils.py",
              "-k", "not integration and not tmux"
          ])
          sys.exit(result.returncode)
          EOF
          
          # Run tests with mock
          uv run python test_with_mock.py

  # Summary job
  integration-test-summary:
    name: Integration Test Summary
    needs: [tmux-test-macos, tmux-test-ubuntu, mock-server-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "=================================================="
          echo "        Integration Test Results"
          echo "=================================================="
          echo ""
          echo "Tmux macOS test: ${{ needs.tmux-test-macos.result }}"
          echo "Tmux Ubuntu test: ${{ needs.tmux-test-ubuntu.result }}"
          echo "Mock API test: ${{ needs.mock-server-test.result }}"
          echo ""
          
          # Fail if any required test failed
          if [[ "${{ needs.tmux-test-macos.result }}" == "failure" ]] || \
             [[ "${{ needs.tmux-test-ubuntu.result }}" == "failure" ]] || \
             [[ "${{ needs.mock-server-test.result }}" == "failure" ]]; then
            echo "❌ Some integration tests failed!"
            exit 1
          else
            echo "✅ All integration tests passed!"
          fi